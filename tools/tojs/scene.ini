[scene]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = scene

#cpp_headers =

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = jsb

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources -I%(cocosdir)s/external/ios/include/v8
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers =  %(cocosdir)s/cocos/core/scene-graph/Node.h %(cocosdir)s/cocos/core/scene-graph/Scene.h %(cocosdir)s/cocos/core/scene-graph/SceneGlobals.h %(cocosdir)s/cocos/core/scene-graph/NodeUIProperties.h  %(cocosdir)s/cocos/scene/Light.h %(cocosdir)s/cocos/scene/Fog.h %(cocosdir)s/cocos/scene/Shadow.h %(cocosdir)s/cocos/scene/Skybox.h %(cocosdir)s/cocos/scene/DirectionalLight.h %(cocosdir)s/cocos/scene/SpotLight.h %(cocosdir)s/cocos/scene/SphereLight.h %(cocosdir)s/cocos/scene/Model.h %(cocosdir)s/cocos/scene/SubModel.h %(cocosdir)s/cocos/scene/Pass.h %(cocosdir)s/cocos/scene/RenderScene.h %(cocosdir)s/cocos/scene/DrawBatch2D.h %(cocosdir)s/cocos/scene/Camera.h %(cocosdir)s/cocos/scene/RenderWindow.h %(cocosdir)s/cocos/scene/Camera.h %(cocosdir)s/cocos/scene/Define.h %(cocosdir)s/cocos/scene/Ambient.h %(cocosdir)s/cocos/2d/framework/UITransform.h %(cocosdir)s/cocos/renderer/core/PassInstance.h %(cocosdir)s/cocos/renderer/core/MaterialInstance.h %(cocosdir)s/cocos/renderer/core/ProgramLib.h

hpp_headers = cocos/bindings/auto/jsb_gfx_auto.h cocos/bindings/auto/jsb_geometry_auto.h cocos/bindings/auto/jsb_assets_auto.h

cpp_headers = cocos/bindings/auto/jsb_pipeline_auto.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = CCObject Light DirectionalLight SpotLight SphereLight Model SubModel Pass RenderScene DrawBatch2D Camera RenderWindow Fog Skybox Shadow PipelineSharedSceneData Ambient Root SkinningModel JointInfo JointTransform BakedSkinningModel BakedJointInfo BakedAnimInfo IRenderWindowInfo AmbientInfo IRenderSceneInfo IPassInfo IPassInfoFull ShadowInfo IPassStates Node SkyboxInfo FogInfo ICameraInfo IMacroPatch MaterialInstance PassInstance ProgramLib Scene SceneGlobals
 
# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = Model::[setInstancedAttrBlock getType getLocalBuffer getModelBounds getWorldBounds],
       SubModel::[getDescriptorSet getInputAssembler getSubMesh setSubMeshBuffers],
       Pass::[setRootBufferAndBlock getUniform],
       AABB::[getBoundary aabbAabb aabbFrustum aabbPlan merge transform transformExtentM4 setCenter getCenter isValid setValid setHalfExtents getHalfExtents set fromPoints],
       SkinningModel::[updateTransform updateUBOs uploadJointData updateWorldMatrix],
       Frustum::[update type planes],
       Plane::[clone copy normalize getSpotAngle fromNormalAndPoint fromPoints set],
       JointTransform::[node world local stamp],
       JointInfo::[bound bindpose transform parents buffers indices target],
       RenderScene::[updateBatches],
       BakedAnimInfo::[buffer data dirty],
       BakedJointInfo::[boundsInfo jointTextureInfo animInfo buffer],
       BakedSkinningModel::[updateTransform updateUBOs],
       DrawBatch2D::[visFlags descriptorSet inputAssembler passes shaders],
       AmbientInfo::[activate],
       Camera::[screenPointToRay],
       Node::[findComponent findChildComponent findChildComponents addComponent removeComponent getComponent getComponents getComponentInChildren getComponentsInChildren checkMultipleComp getEventProcessor dispatchEvent getUIProps],
       NodeUiProperties::[getUITransformComp setUITransformComp getUIComp setUIComp] # not impl


rename_functions = Root::[initialize=_initialize]

getter_setter= Root::[device mainWindow curWindow tempWindow windows pipeline batcher2D scenes cumulativeTime frameTime frameCount fps fixedFPS dataPoolManager useDeferredPipeline/isUsingDeferredPipeline],
       RenderWindow::[width height framebuffer shouldSyncSizeWithSwapchain/shouldSyncSizeWithSwapchain hasOnScreenAttachments/hasOnScreenAttachments hasOffScreenAttachments/hasOffScreenAttachments cameras],
       Ambient::[skyColor skyIllum albedoArray groundAlbedo enabled/isEnabled colorArray],
       DirectionalLight::[direction illuminance],
       SpotLight::[position size range luminance direction spotAngle angle aspect aabb frustum],
       SphereLight::[position size range luminance aabb]

field = Ambient::[SUN_ILLUM SKY_ILLUM]

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =
# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Light EventListener
